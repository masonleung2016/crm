<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" debug="false">
  <!-- 定义日志的根目录 -->
  <property name="LOG_HOME" value="/Users/lihang/log"/>
  <!-- 定义日志文件名称 -->
  <property name="appName" value="liaoliao"/>
  <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->

  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
    <!--
        日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符
        -->
  </appender>

  <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
  <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <Encoding>UTF-8</Encoding>
    <!-- 指定日志文件的名称 -->
    <file>${LOG_HOME}/${appName}.log</file>
    <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
      <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
      <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->w
      <MaxHistory>365</MaxHistory>
      <!--
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置
            SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>100MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
    <!--
        日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger{50} 表示
        logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符
        -->
    <layout class="ch.qos.logback.classic.PatternLayout">
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{40} : %line ] - %msg%n</pattern>
    </layout>
  </appender>
  <appender name="FILE-ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 这里添加一个过滤器 -->
    <file>${LOG_HOME}/LoggingBack-error.log</file>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${LOG_HOME}/LOG-ERROR-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <maxHistory>7</maxHistory>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n
      </pattern>
    </encoder>
  </appender>
  <!--
        logger主要用于存放日志对象，也可以定义日志类型、级别
        name：表示匹配的logger类型前缀，也就是包的前半部分
        level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
        additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
          false：表示只用当前logger的appender-ref，
          true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
        -->
  <logger name="org.springframework" level="WARN"/>
  <logger name="org.springframework.web.servlet.mvc" level="WARN"/>
  <logger name="org.apache.ibatis.io" level="WARN"/>
  <logger name="org.mybatis.spring.mapper.ClassPathMapperScanner" level="WARN"/>
  <logger name="org.mybatis.spring.SqlSessionFactoryBean" level="WARN"/>
  <logger name="springfox.documentation" level="WARN"/>
  <logger name="org.apache.commons.beanutils.converters" level="WARN"/>
  <logger name="org.quartz.core.JobRunShell" level="WARN"/>
  <logger name="org.quartz.core.QuartzSchedulerThread" level="WARN"/>
  <logger name="org.apache.http" level="WARN"/>
  <logger name="org.apache.shiro.web.servlet" level="WARN"/>
  <logger name="org.apache.shiro.realm" level="WARN"/>
  <logger name="org.apache.shiro.authc" level="WARN"/>
  <logger name="cn.hang.crm" level="DEBUG">
    <appender-ref ref="appLogAppender"/>
  </logger>
  <!--
  root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
  要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
  -->
  <root level="debug">
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>
